// Code generated by MockGen. DO NOT EDIT.
// Source: internal/request/request.go
//
// Generated by this command:
//
//	mockgen -source=internal/request/request.go -destination=internal/request/request_mock.go -package=request
//

// Package request is a generated GoMock package.
package request

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockInterceptor is a mock of Interceptor interface.
type MockInterceptor struct {
	ctrl     *gomock.Controller
	recorder *MockInterceptorMockRecorder
	isgomock struct{}
}

// MockInterceptorMockRecorder is the mock recorder for MockInterceptor.
type MockInterceptorMockRecorder struct {
	mock *MockInterceptor
}

// NewMockInterceptor creates a new mock instance.
func NewMockInterceptor(ctrl *gomock.Controller) *MockInterceptor {
	mock := &MockInterceptor{ctrl: ctrl}
	mock.recorder = &MockInterceptorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterceptor) EXPECT() *MockInterceptorMockRecorder {
	return m.recorder
}

// After mocks base method.
func (m *MockInterceptor) After(rsp *http.Response) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "After", rsp)
}

// After indicates an expected call of After.
func (mr *MockInterceptorMockRecorder) After(rsp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "After", reflect.TypeOf((*MockInterceptor)(nil).After), rsp)
}

// Before mocks base method.
func (m *MockInterceptor) Before() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Before")
}

// Before indicates an expected call of Before.
func (mr *MockInterceptorMockRecorder) Before() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Before", reflect.TypeOf((*MockInterceptor)(nil).Before))
}

// Redirect mocks base method.
func (m *MockInterceptor) Redirect(rsp *http.Response) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Redirect", rsp)
}

// Redirect indicates an expected call of Redirect.
func (mr *MockInterceptorMockRecorder) Redirect(rsp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Redirect", reflect.TypeOf((*MockInterceptor)(nil).Redirect), rsp)
}

// Mockdoer is a mock of doer interface.
type Mockdoer struct {
	ctrl     *gomock.Controller
	recorder *MockdoerMockRecorder
	isgomock struct{}
}

// MockdoerMockRecorder is the mock recorder for Mockdoer.
type MockdoerMockRecorder struct {
	mock *Mockdoer
}

// NewMockdoer creates a new mock instance.
func NewMockdoer(ctrl *gomock.Controller) *Mockdoer {
	mock := &Mockdoer{ctrl: ctrl}
	mock.recorder = &MockdoerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockdoer) EXPECT() *MockdoerMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *Mockdoer) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockdoerMockRecorder) Do(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*Mockdoer)(nil).Do), req)
}
